"""
===== 摩尔投票法 =====
摩尔投票法也被称之为 "多数投票法", 该算法解决的问题是如何在任意多的候选人中(选票无序)找到票数占比超过一半的那一个
分两个阶段:
    [对抗阶段] 分属两个候选人的票数进行两两对抗
    [计数阶段] 计算对抗结果中最后留下的候选人票数是否有效

题目如下:
    在一个列表中占比超过一半的元素称之为主要元素, 当我们为程序传入一个列表时, 请通过摩尔投票法获取该列表的主要元素
"""


def run(_list: list):
    count = 0
    major = _list[0]
    for i in _list:
        if count == 0:
            major = i
        count = count + 1 if major == i else count - 1
        print(major)
    if _list.count(major) > len(_list)/2:
        print(f"该列表中的重要元素为: {major}")
    else:
        print("抱歉, 当前列表中没有主要元素")


if __name__ == "__main__":
    _list = input("请输入元素, 各个元素之间以','分割: ").split(',')
    run(_list)


"""
思路解析:
0. 我们可以先将列表中的第一个元素暂定为主要元素, 并计数count为0, 然后再开始对列表循环
1. 对抗阶段:
    每次循环需要首先判断计数, 如果count等于0那么我们需要把当前循环到的元素作为新的暂定元素
    如果我们循环到一个新的元素并且该元素与我们暂定的主要元素相同,那么count计数加1
    反之，如果该元素与我们暂定的只要元素不相同, 那么count计数减1
2. 计数阶段:
    此阶段循环已经结束, 我们需要判断所暂定的主要元素是否占所有元素的一半以上
    切记一定要进行计数阶段的判断, 来避免类似[1,2,3]形式的列表带来的错误
"""
